1.什么是分库分表

当存储数据过多，性能下降，无法满足正常的业务需求的时候，就需要将单个空间拆分成多个，分担单个个体的压力，缩短响应时间，提高性能。
分库分表，顾名思义，是两个操作。
分库，拆分成多个数据库；分表，拆分成多张表。
常见方式有：单库单表->单库多表->多库多表

2.如何进行数据拆分

最简单的方法就是按照 [ID] 将数据分配到不同的库不同的表中。
举个例子，比如，你原来有一张App表，分库分表以后你选择 [app_id] 作为分表键，
那么当你创建一条app的数据的时候，就会根据 [app_id] 计算这条数据放到哪个库哪张表里去。

例如，你有16个库（从00库到15库），每个库64张表，那一共就是1024张表（从0000表到1023表）
id是0，那么就放到00库的0000表中；
id是1，那么就放到00库的0001表中；
......
id是1023，那么就放到15库的1023表中；
id是1024，那么就放到00库的0000表中；
......
以此类推。

那么当id=10000的时候，10000%1024=784，那么就是放在0784这张表中，
784／64=12，那么这张表就是在12库中。

这个其实就是分库分表路由的过程，这个算法就是路由规则。
我们上面使用的这种，id简单取模的算法对应到tddl的路由规则中就是：

// 该记录应该写到哪一个库中
dbRuleArray=((#id,1,1024#).longValue().abs() % 1024).intdiv(64)
// 该记录应该写到库中的哪一张表里面去
tbRuleArray=((#id,1,1024#).longValue().abs() % 1024)

3.如何确定分表键

这里有一个很重要的问题，就是如何选择谁作为分表键，这涉及到数据库的可扩展性，是否便于查询，能否避免跨库事务等，
还有就是，选择的分表方式必须能使数据有效的水平分布，如果数据总是落到特定的某个数据库表中，那就分库分表就没有意义了。
这个问题没有明确的答案，必须根据实际业务来确定。建议分表键尽可能找到数据表中的数据在业务逻辑上的主体，
并确定大部分（或核心的）数据库操作都围绕这个主体的数据进行。
如果一个分表键无法解决你的问题，可以考虑使用两个，但是分表键越少越好。